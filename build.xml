<?xml version="1.0"?>

<!--****************************************************************************
**
**  ANODYNE OS - XP
**
*****************************************************************************-->

<project name="anodyneos-xp" default="compile" basedir="."
        xmlns:artifact="antlib:org.apache.maven.artifact.ant">

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  setup and defaults
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <property file="build.properties"/>

    <property name="compile.source" value="1.4"/>
    <property name="compile.target" value="1.4"/>

    <!-- defaults, override in build.properties if desired -->
    <property name="compile.deprecation" value="off"/>
    <property name="compile.debug" value="true"/>
    <property name="compile.debuglevel" value="lines,source,vars"/>

    <property name="webapp.context" value="/aos-xp"/>
    <property name="webapp.reloadable" value="false"/>
    <property name="transformerFactory" value="xalan"/>
    <!--
    <property name="transformerFactory" value="xsltc"/>
    -->

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  common
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <import file="build.webCommon.xml"/>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  properties
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <property environment="env"/>
    <property name="dir.src.sample"             location="src.sample"/>
    <property name="dir.build.java.sample"      location="build/java.sample"/>
    <property name="dir.build.classes.sample"   location="build/classes.sample"/>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  prepare.post
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="prepare.post">
        <!-- make directories -->
        <mkdir dir="${dir.build.java.sample}"/>
        <mkdir dir="${dir.build.classes.sample}"/>

        <artifact:pom id="pom.main" file="pom.xml"/>
        <artifact:dependencies usescope="compile" filesetId="fs.dependencies.compile" pomrefid="pom.main"/>
        <artifact:dependencies usescope="test" filesetId="fs.dependencies.test" pomrefid="pom.main"/>
        <artifact:dependencies usescope="runtime" filesetId="fs.dependencies.runtime" pomrefid="pom.main"/>

        <!-- paths -->
        <path id="path.dependencies.compile">
            <fileset refid="fs.dependencies.compile"/>
        </path>
        <path id="path.dependencies.runtime">
            <fileset refid="fs.dependencies.runtime"/>
        </path>
    </target>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  refreshWebapp.post
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="refreshWebapp.post">
        <!-- log4j -->
        <copy toDir="${dir.build.webapp}/WEB-INF/classes">
            <fileset dir=".">
                <include name="log4j.properties"/>
            </fileset>
        </copy>

        <!-- /WEB-INF/classes/META-INF/services/javax.xml.transform.TransformerFactory -->
        <copy file="${dir.src.misc}/TransformerFactory.${transformerFactory}"
                tofile="${dir.build.webapp}/WEB-INF/classes/META-INF/services/javax.xml.transform.TransformerFactory"/>
    </target>

    <!--++++++++++++++++++++++++++++++++++++
    ++
    ++  SAMPLE
    ++
    +++++++++++++++++++++++++++++++++++++-->

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  translateSample
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="translateSample" depends="compile">
        <java taskname="translateSample" fork="yes" classname="org.anodyneos.xpImpl.translater.Translater">
            <classpath refid="path.dependencies.compile"/>
            <classpath location="${dir.build.classes}"/>
            <arg value="${dir.src.sample}" /> <!-- root directory of all xp files, will be used to calculate package -->
            <arg value="${dir.src.sample}/Page.xp" />
            <arg value="${dir.build.java.sample}/Page.java" />
            <arg value="${dir.src.sample}/registry.xpreg" />
        </java>
        <mkdir dir="${dir.build.java.sample}/common"/>
    </target>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  compileSample
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="compileSample" depends="translateSample">
        <!-- compile -->
        <javac  destdir="${dir.build.classes.sample}"
                deprecation="no"
                includes="**/*.java"
                debuglevel="${compile.debuglevel}"
                debug="${compile.debug}">
            <classpath refid="path.dependencies.compile"/>
            <classpath location="${dir.build.classes}"/>
            <src path="${dir.build.java.sample}"/>
        </javac>
        <!-- resources -->
        <copy toDir="${dir.build.classes.sample}">
            <fileset dir="${dir.build.java.sample}">
                <patternset refid="pattern.resources"/>
            </fileset>
        </copy>
    </target>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  runSample
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="runSample" depends="compileSample" description="Run src.sample/xp/Page.xp">
        <java taskname="runSample" fork="yes" classname="Page">
            <classpath refid="path.dependencies.compile"/>
            <classpath location="${dir.build.classes}"/>
            <classpath location="${dir.build.classes.sample}"/>
        </java>
    </target>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ~~  testStandalone
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <target name="testStandalone" depends="compile" description="testStandalone">
        <java taskname="testStandalone" fork="yes" classname="test.org.anodyneos.xpImpl.XpStandaloneTest">
            <classpath location="${dir.build.classes}"/>
            <classpath refid="path.dependencies.compile"/>
            <arg value="${dir.build.java.sample}" />
            <arg value="${dir.build.classes.sample}" />
            <arg value="${dir.src.sample}" />
            <arg value="file:/registry.xpreg" />
            <arg value="file:/Page2.xp" />
        </java>
        <!--<mkdir dir="${dir.build.java.sample}/common"/>-->
    </target>

</project>
